<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zy.p2p.base.mapper.AccountMapper">
  <resultMap id="BaseResultMap" type="com.zy.p2p.base.domain.Account">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="tradePassword" jdbcType="VARCHAR" property="tradePassword" />
    <result column="usableAmount" jdbcType="DECIMAL" property="usableAmount" />
    <result column="freezedAmount" jdbcType="DECIMAL" property="freezedAmount" />
    <result column="borrowLimitAmount" jdbcType="DECIMAL" property="borrowLimitAmount" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="unReceiveInterest" jdbcType="DECIMAL" property="unReceiveInterest" />
    <result column="unReceivePrincipal" jdbcType="DECIMAL" property="unReceivePrincipal" />
    <result column="unReturnAmount" jdbcType="DECIMAL" property="unReturnAmount" />
    <result column="remainBorrowLimit" jdbcType="DECIMAL" property="remainBorrowLimit" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from javas1.account
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.zy.p2p.base.domain.Account">
    insert into javas1.account (id,version,tradePassword, usableAmount, freezedAmount,
      borrowLimitAmount, unReceiveInterest,
      unReceivePrincipal, unReturnAmount, remainBorrowLimit
      )
    values (#{id},0,#{tradePassword,jdbcType=VARCHAR}, #{usableAmount,jdbcType=DECIMAL}, #{freezedAmount,jdbcType=DECIMAL},
      #{borrowLimitAmount,jdbcType=DECIMAL}, #{unReceiveInterest,jdbcType=DECIMAL},
      #{unReceivePrincipal,jdbcType=DECIMAL}, #{unReturnAmount,jdbcType=DECIMAL}, #{remainBorrowLimit,jdbcType=DECIMAL}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.zy.p2p.base.domain.Account">
    update javas1.account
    set
      version = version+1,
      tradePassword = #{tradePassword,jdbcType=VARCHAR},
      usableAmount = #{usableAmount,jdbcType=DECIMAL},
      freezedAmount = #{freezedAmount,jdbcType=DECIMAL},
      borrowLimitAmount = #{borrowLimitAmount,jdbcType=DECIMAL},
      unReceiveInterest = #{unReceiveInterest,jdbcType=DECIMAL},
      unReceivePrincipal = #{unReceivePrincipal,jdbcType=DECIMAL},
      unReturnAmount = #{unReturnAmount,jdbcType=DECIMAL},
      remainBorrowLimit = #{remainBorrowLimit,jdbcType=DECIMAL}
    where id = #{id,jdbcType=BIGINT} AND version = #{version}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, tradePassword, usableAmount, freezedAmount, borrowLimitAmount, version, 
    unReceiveInterest, unReceivePrincipal, unReturnAmount, remainBorrowLimit
    from javas1.account
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, tradePassword, usableAmount, freezedAmount, borrowLimitAmount, version, 
    unReceiveInterest, unReceivePrincipal, unReturnAmount, remainBorrowLimit
    from javas1.account
  </select>
</mapper>